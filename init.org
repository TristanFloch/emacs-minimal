#+title: Minimal Emacs configuration

#+PROPERTY: header-args :results silent :tangle "./init.el"
#+STARTUP: overview

This is a minimal Emacs configuration.
Its goal is to provide a sane basis for anyone who might want to create their own configuration.

This is greatly inspired by [[https://github.com/Yumasi/simple-emacs-config][Yumasi's configuration for EPITA students]].

One can copy this org file and tangle it with =org-babel-tangle= or simply copy code blocks to their configuration.

* Package management
** Package archives

#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+end_src

** Package manager

Multiple package managers exist. Here I go with [[https://github.com/jwiegley/use-package][use-package]] as it is pretty straightforward.

#+begin_src emacs-lisp
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t) ; auto enable packages from config file
#+end_src

[[https://github.com/radian-software/straight.el][Straight]] is another great package manager that one might want to look into.

* Appearance
** UI

Remove some unneeded UI elements. Tangle this to =./early-init.el= for better optimization.

#+begin_src emacs-lisp :tangle ./early-init.el
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Then set this in =./init.el= for consistency.

#+begin_src emacs-lisp
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil)
#+end_src

** Theme

[[https://github.com/doomemacs/themes][doom-themes]] is the collection of themes from [[https://github.com/doomemacs/doomemacs][Doom Emacs]]. It integrates well with multiple packages.

#+begin_src emacs-lisp
(use-package doom-themes
  :config
   ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-snazzy t)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )
#+end_src

** Font

Setting the font. Those need to be installed on your system.

On NixOS, those can be installed with:

#+begin_src sh :tangle no
$ nix profile install nixpkgs#source-code-pro
$ nix profile install nixpkgs#roboto-mono
$ nix profile install nixpkgs#ubuntu_font_family
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Source Code Pro" :height 130 :weight 'medium)

(set-face-attribute 'italic nil
                    :family "Victor Mono" :weight 'regular :slant 'italic)

(set-face-attribute 'variable-pitch nil
                    :font "Ubuntu Nerd Font" :height 150 :weight 'light)

(set-face-attribute 'fixed-pitch nil :inherit 'default)
#+end_src

* Defaults

Emacs defaults bindings can be weird at times.
Here are simple enhancements.

#+begin_src emacs-lisp
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Typed text replaces the selection if the selection is active,
;; pressing delete or backspace deletes the selection.
(delete-selection-mode)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Use "y" and "n" to confirm/negate prompt instead of "yes" and "no"
;; Using `advice' here to make it easy to reverse in custom
;; configurations with `(advice-remove 'yes-or-no-p #'y-or-n-p)'
;;
;; N.B. Emacs 28 has a variable for using short answers, which should
;; be preferred if using that version or higher.
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (advice-add 'yes-or-no-p :override #'y-or-n-p))

;; Turn on recentf mode
(add-hook 'after-init-hook #'recentf-mode)

;; Do not save duplicates in kill-ring
(setq kill-do-not-save-duplicates t)

;; Enable savehist-mode for command history
(savehist-mode 1)

;; Ensure file ends with a newline
(setq require-final-newline t)

;; Highlight trailing whitespaces
(global-whitespace-mode 1)
(setq-default whitespace-style '(face tab-mark lines-tail trailing))
#+end_src

* Personal information

Those variables can be used by various packages for various options.
For instance, =org-export-dispatch= sets the name of output files with theme.

#+begin_src emacs-lisp
(setq user-full-name "Tristan Floch"
      user-mailaddress "tristan.floch@epita.fr")
#+end_src

If your name is not Tristan Floch, you might want to change this.

* Completion
** Popup completion

[[https://github.com/minad/corfu][Corfu]] is a better front-end than the default completion UI.

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-separator ?\s) ; Orderless field separator
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 2) ; number of characters to type before triggering corfu
  (corfu-auto-delay 0.0) ; no delay for completion
  (corfu-echo-documentation 0.25)
  (corfu-preview-current nil)
  (corfu-max-width 70)
  (corfu-preselect-first nil)
  (corfu-on-exact-match nil)
  (corfu-quit-no-match 'separator)
  (tab-always-indent nil)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :init
  (global-corfu-mode)
  :config
  ;; Silence the pcomplete capf, no errors or messages!
  ;; Important for corfu
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

Then we can setup [[https://github.com/minad/cape][cape]] which is a completion back-end.
It enhances emacs basic completion with many features such as filename, buffer local words, and more.

#+begin_src emacs-lisp
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev))
#+end_src

** Mini-buffer completion

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI (e.g. the mini-buffer) based on Emacs default completion system.

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+end_src

[[https://github.com/oantolin/orderless][Orderless]] enhances Vertico by providing better fuzzy matching over query results.
It is recommended to use both packages together.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

This configuration can be tested straight away by running =M-x= or the =find-file (C-x C-f)= command for instance.

Finally, [[https://github.com/minad/marginalia][Marginalia]] can be used to annotate query results from Vertico with information.

#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
  #+end_src
